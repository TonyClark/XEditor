parserImport XOCL;
parserImport XEditor;

import AbstractSyntax;

context Root @Class Location @Attribute x:Integer end @Attribute y:Integer end @Constructor(x,y) ! end end

Root::LOCATION_MANAGER := LocationManager();
Root::PARSED_MODEL     := null;

@EventHandler parser(key,text,language,editor)

  // This handler is invoked by the editor each time it needs to parse the text.
  // This may be invoked when there are syntax errors, in which case the error
  // is returns as a triple [charStart,charEnd,message]. If no error occurs then
  // the char start is -1...
  
    editor.startActivity("Parsing"); 
    Root::PARSED_MODEL := null;
    try 
      let grammar = language.lookupPath(Root).grammar then
          model = grammar.parseString(text,grammar.startingSymbol,[])
      in 
        editor.endActivity("Parse");
        Root::PARSED_MODEL := model; 
        [-1,-1,""]
      end
    catch(exception)
       editor.displayError(exception.toString());
       @TypeCase(exception)
         Exceptions::XMFEditorError do Root::xmfException := exception;
           [exception.charStart,exception.charEnd,exception.message]
         end
         Parser::ParseError do Root::xmfException := exception;
           [exception.errorPos,exception.errorPos,exception.message]
         end
        Object do Root::xmfException := exception;
           [text->size - 1,text->size - 1,exception.toString()]
        end
      end
  end
end;  