parserImport XOCL;
parserImport Parser::BNF;

import Exceptions;
import OCL;

context Filmstrips

  @Class Constraint

    @Attribute exp:Performable (<) end

    @Grammar extends OCL::OCL.grammar

      Constraint ::= e = <<Exp>> 'end' { [| Filmstrips::Constraint(<e.lift()>) |] }.

    end

    @Constructor (exp) ! end

    @Operation eval(env:Env::Env,f:Filmstrip,index:Integer):Element
      self.eval(exp,env,f,index)
    end

    @Operation eval(exp:Performable,env:Env::Env,f:Filmstrip,index:Integer):Element
      @Case exp of
        BinExp(l,"=",r) do
          self.eval(l,env,f,index) = self.eval(r,env,f,index)
        end
        BoolExp(b) do b end
        IntExp(n)  do n end 
        Var(n)     do 
          if env.binds(n)
          then env.lookup(n)
          else throw Error("unbound var " + n)
          end
        end
        else throw Error("unknown expression " + exp)
      end
    end

  end
