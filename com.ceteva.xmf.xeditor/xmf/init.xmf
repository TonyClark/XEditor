parserImport XOCL;
parserImport Parser::BNF;

//import XEditor;

// ********************************************************************************************************
// *                                                                                                      *
// *                                     Initialise the XMF Console                                       *
// *                                                                                                      *
// *   This file contains the initialiser for the XMF Console. It defines handlers for events that the    *
// *   Java editor generates. Each handler may be invoked using CALL (expects return) or SEND (no return) *  
// *                                                                                                      *                                                                    *
// ********************************************************************************************************

try

// Ensure that this file is compiled next time...
// Compiler::compileFile("../com.ceteva.xmf.xeditor/xmf/init.xmf",true,true);   

Root::Console := xmf.javaClass("console.Console");

// Create the console...
Console();

// Create the browser tree. This is set as part of the image creation in BootConsole.xmf
Console.CONSOLE.setRoot(XEditor::getBrowserTree(Root));

// Set the header...
Console.CONSOLE.setTitle("XEditor build " + xmf.getSystemHeaderProperty("Version"));

Console.xmfInitialized();

// Start the top level loop (does this return?)
let handleException(x) = { XEditor::showException(x); self.handleException(x) };
    handleResult(r) = { XEditor::hideException(); self.handleResult(r) } then
    topLevel = TopLevel::Loop(stdin,stdout,handleException,handleResult)
in xmf.setProperty("topLevel",topLevel);
   topLevel.grammar := TopLevel::Console.grammar;
   XMF.add(@Operation topLevel() self.property("topLevel") end);
   @Letrec 
     launch() =
       @Fork 
         try 
           topLevel.loop() 
         catch(exception)
           excepton.printBacktrace();
           launch()
         end
       end
    in launch()
    end
end;

// The command lines may have set an INIT file which should be loaded at this point.
// The INIT file should be a manifest. If it exists it is compiled and then loaded...
  
let initFile = Console.XMF_INIT.subst("",".o",true) then
    source = initFile + ".xmf";
    binary = initFile + ".o";
    home = initFile.subst("","/Manifest",true)
in if source.fileExists()
   then 
     Compiler::compileFile(source,true,true);
     let manifest = binary.loadBin()
     in manifest.build(home);
        manifest.load(home) 
     end 
   end 
end

catch(exception)
  print("HELP: " + exception)
end;