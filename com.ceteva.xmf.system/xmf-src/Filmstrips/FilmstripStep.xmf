parserImport XOCL;

import Filmstrips;

context Filmstrips
  @Class FilmstripStep
    @Attribute pre:Snapshot          (<) end
    @Attribute target:Object         (<) end
    @Attribute message:String        (<) end
    @Attribute doc    :String        (<) end
    @Attribute args:[Element]        (<) end
    @Attribute value:Element         (<) end
    @Attribute steps:[FilmstripStep] (<) end
    @Attribute post:Snapshot         (<) end
    
    @Constructor(pre,target,message,doc,args,value,post) end

    @Operation addStep(step:FilmstripStep) 
      self.steps := steps + [step]
    end

    @Operation asJavaStep(colours:ColourMap):[Element]
      // Returns the filmstrip as a Java object
      let Step = xmf.javaClass("diagrams.filmstrips.Step");
          label = target.toString() + "." + message + "(" + args->collect(a | a.toString())->separateWith(",") + ")"
      in Step(pre.asJavaSnapshot(colours),label,doc,value.toString(),steps->collect(a | a.asJavaStep(colours)),post.asJavaSnapshot(colours))
      end
    end

    @Operation getAncestors(s:FilmstripStep):[FilmstripStep]
      if s = self
      then [self]
      else 
        @Find(child,steps)
          when child.getAncestors(s) <> []
          do child.ancestors(s) + [self]
          else []
        end
      end
    end

    @Operation getDescendents():[FilmstripStep]
      steps->iterate(step ss=steps | ss + step.getDescendents())
    end

    @Operation getDescendents(s:FilmstripStep):[FilmstripStep]
      if s = self
      then self.getDescendents()
      else 
        @Find(child,steps)
          when child.getDescendents(s) <> null
          do child.getDescendents(s)
          else null
        end
      end
    end

    @Operation getChildren(s:FilmstripStep):[FilmstripStep]
      if s = self
      then steps
      else
        @Find(child,steps)
          when child.getChildres(s) <> null
          do child.getChildren(s)
          else null
        end
      end
    end

    @Operation getLeftNeighbour(s:FilmstripStep):FilmstripStep
      if steps->includes(s)
      then 
        if steps->head = s
        then null
        else 
          let index = steps->indexOf(s)
          in steps->nth(index-1)
          end
        end
      else 
        @Find(child,steps)
          when child.getLeftNeightbour(s) <> null
          do child.getLeftNeighbour(s)
          else null
        end
      end
    end

    @Operation getLeftSiblings(s:FilmstripStep):[FilmstripStep]
      if steps->includes(s)
      then 
        let index = steps->indexOf(s)
        in steps->take(index)
        end
      else 
        @Find(child,steps)
          when child.getLeftSiblings(s) <> null
          do child.getLeftSiblings(s)
          else []
        end
      end
    end

    @Operation getRightNeighbour(s:FilmstripStep):FilmstripStep
      if steps->includes(s)
      then 
        if steps->last = s
        then null
        else 
          let index = steps->indexOf(s)
          in steps->nth(index+1)
          end
        end
      else 
        @Find(child,steps)
          when child.getRightNeighbour(s) <> null
          do child.getRightNeighbour(s)
          else null
        end
      end
    end

    @Operation getRightSiblings(s:FilmstripStep):[FilmstripStep]
      if steps->includes(s)
      then 
        let index = steps->indexOf(s)
        in steps->drop(index+1)
        end
      else 
        @Find(child,steps)
          when child.getRightSiblings(s) <> null
          do child.getRightSiblings(s)
          else []
        end
      end
    end
    
    @Operation getHistory():[Snapshot]
      if steps->isEmpty
      then [pre,post]
      else steps->iterate(step history=[] | history + step.getHistory()->butLast) + [post]
      end
    end

    @Operation getParent(s:FilmstripStep):FilmstripStep
      if steps->includes(s)
      then self
      else 
        @Find(child,steps)
          when child.getParent(s) <> null
          do child.getParent(s)
          else null
        end
      end
    end

    @Operation toTransition():Transition
      // Used to build a term from the snapshots...
      let sources = pre.buildObjects();
          targets = post.buildObjects()
      in Transition(target,message.toString(),args,value,sources,targets)
      end
    end

    @Operation toString():String
      message + "(" + args.separateWith(",") + ")"
    end
    
  end