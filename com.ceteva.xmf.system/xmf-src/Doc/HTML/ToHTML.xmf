parserImport XOCL;
parserImport Aspects;

/******************************************************************************
 *                                                                            *
 *                       XMF Documentation Generation                         *
 *                       ----------------------------                         *
 *                                                                            *
 *  This file defines an aspect that allows standard model elements to be     *
 *  transformed and exported to HTML. This is used to document the system.    *
 *  Use Root.writeHTML() to construct a copy of the entire system as HTML     *
 *  documentation. Note that the resulting documentation expects to be in a   *
 *  file system that is relative to Root. Therefore, if you generate          *
 *  documentation for sub-packages of XMF or your own packages then place them*
 *  into a file system that replicates the name-space hierarchy for all the   *
 *  parents of the generated package (or simply just generate everything from *
 *  Root).                                                                    *
 *                                                                            *
 ******************************************************************************/ 

import IO;

context NameSpace
  @Bind VISITED = [] end

context Doc
  @Bind SHOW_OPERATIONS_ON_DIAGRAM = true end
  
context Doc
  @Bind SHOW_ATTRIBUTES_ON_DIAGRAM = true end

@Aspect ToPlantUML

  @Class XCore::NameSpace
  
    @Operation getDiagram():String
      self.getDiagram(@Operation(name,ignore) "\"" + name + "\"" end,[],[],true)
      //self.getDiagram(@Operation(name) "\" [[ACTION:" + name + " " + name + "]]\"" end,[])
    end
  
    @Operation getDiagram(actions:(String,String) -> String,shown:[String],selected:[String],includeXCore:Boolean):String
      if ((shown <> []) and not(shown->includes(name.toString()))) or NameSpace::VISITED->contains(self.name) or (not(includeXCore) and XCore.contents()->contains(self))
      then ""
      else 
        "\@startuml\n" + "top to bottom direction\n" + "allowmixing\n" + "skinparam linetype ortho\n" +
          "package " + name + " {\n" +
            self.contents()->select(x | x <> null and x.isKindOf(Class) and not(x.isKindOf(Package)))->iterate(c s = "" | s + c.getDiagram(actions,shown,selected,includeXCore)) +
            self.contents()->select(x | x <> null and x.isKindOf(Package))->iterate(p s = "" | s + 
              "package " + p.name + " {\n}\n" +
              p.imports->reject(x | x = Root or x = XCore)->iterate(i x="" | x + p.name + " \"import\" --> " + i.name + "\n")
            ) +
         "}\n" + 
        "\@enduml\n"
      end
    end
  end

  @Class XCore::Package
  
    @Operation getDiagram(actions:(String,String) -> String,shown:[String],selected:[String],includeXCore:Boolean):String
      "\@startuml\n" + "top to bottom direction\n" + "allowmixing\n" + 
        "<style>\nnote {\nFontsize 11\nFontcolor blue\nMaximumWidth 150\n}\n</style>\n" +
        "skinparam Class {\n FontSize 20\n }\n" + 
        self.contents()->select(x | x <> null and x.isKindOf(Class) and not(x.isKindOf(Package)))->iterate(c s = "" | s + c.getDiagram(actions,shown,selected,includeXCore,[self])) +
        self.contents()->select(x | x <> null and x.isKindOf(Package))->iterate(p s = "" | s + 
          if (shown <> []) and not(shown->includes(p.name().toString()))
          then ""
          else
            "package " + actions(p.name(),"") + " as " + p.name()  + (if selected->includes(p.name().toString()) then " #red " else "" end) + " {\n}\n" +
             p.imports->iterate(i x="" | x + p.name + " \"import\" --> " + i.name  + "\n")
          end
        ) +
      "\n\@enduml\n"
    end
  end

  @Class XCore::Class

    @Operation decorateName(a:Attribute):String
      if a.type.isKindOf(Seq)
      then "*" + a.name
      else
        if a.type.isKindOf(Set)
        then "*" + a.name
        else a.name
        end
      end
    end

    @Operation possiblyGenericName(c:Class):String
      if c.of().isKindOf(XCore::GenericClass)
      then c.of().getGenericName(c)
      else c.name
      end
    end
    
    @Operation getDiagram(actions:(String,String) -> String,shown:[String],selected:[String],includeXCore:Boolean,packages:[Package]):String
      if self.of().isKindOf(XCore::GenericClass)
      then self.of().getDiagram(self,actions,shown,selected,includeXCore,packages)
      elseif ((shown <> []) and not(shown->includes(name.toString()))) or NameSpace::VISITED->contains(self.name) or (not(includeXCore) and XCore.contents()->contains(self))
      then ""
      else
        NameSpace::VISITED := NameSpace::VISITED + [self.name]; 
        //"class \" [[ACTION:" + name + " " + name + "]]\" as " + name + " {\n" +
        let isLocal = packages->contains(owner) then
            importPrefix = if not isLocal then owner.name + "::" else "" end;
            isGetter(o) = o.hasProperty("GETTER");
            isUpdater(o) = o.hasProperty("UPDATER")
        in 
        
          "class " + actions(self.name(),importPrefix) + " as " + name  + (if selected->includes(name.toString()) then " #red " else "" end) + " {\n" +
        
              if isLocal
              then 
                if Doc::SHOW_ATTRIBUTES_ON_DIAGRAM andthen attributes->exists(a | [String,Boolean,Integer,Float,Symbol]->contains(a.underlyingType()) or a.underlyingType().isKindOf(OpType))
                then
                  attributes->iterate(a s=" -- <size:12> <color:#DarkGreen> Attributes --\n" |
                    if [String,Boolean,Integer,Float,Symbol]->contains(a.type)
                    then s + "<size:12><color:#DarkGreen>" + a.name + ":<color:#Blue>" + a.type.name + "\n"
                    elseif a.underlyingType().isKindOf(OpType)
                    then s + "<size:12><color:#DarkGreen>" + a.name + ":<color:#Blue>" + a.type.toString() + "\n"
                    else s
                    end)
                else ""
                end +
                if Doc::SHOW_OPERATIONS_ON_DIAGRAM andthen not operations->isEmpty
                then
                  operations->reject(o | isGetter(o) or isUpdater(o))->iterate(o s="-- <size:12>  <color:#DarkGreen> Operations --\n" | 
                      let type = o.type() then
                          range = if type <> Element then ":<color:#Blue>" + type.name else "" end;
                          params = o.paramNames()->collect(n | "<color:#Black>" + n)->separateWith(",")
                      in s + "<size:12><color:#DarkGreen>" + o.name + "(" + params + ")" + range + "\n"
                      end)
                else ""
                end
              else "" 
              end +
                
          "}\n" 
        end +

        if documentation <> null 
        then 
          @Letrec 
            strip(chars:[Integer]):String =
              if chars = []
              then ""
              else
                let char = chars->head; rest = chars->tail
                in if char = " "->asSeq->head
                   then " " + strip(rest->asString.stripLeadingWhiteSpace()->asSeq)
                   elseif char = "\n"->asSeq->head
                   then " " + strip(rest)
                   else [char]->asString + strip(rest)
                   end
                end
              end
           in  "note top of " + name + "\n" + strip(documentation.doc->asSeq) + "\nend note\n" 
           end
        else "" 
        end + 
        
        attributes->iterate(a s="" |
          if not(a.underlyingType().isKindOf(OpType)) and not([String,Boolean,Integer,Float,Symbol]->contains(a.underlyingType())) and ((shown = []) or shown->contains(a.underlyingType().name.toString())) and (not(XCore.contents()->contains(a.underlyingType())) or includeXCore) 
          then s + a.underlyingType().getDiagram(actions,shown,selected,includeXCore,packages) + name + " --> \""+self.decorateName(a)+"\" " + self.possiblyGenericName(a.underlyingType()) + "\n"
          else s
          end) +
    
        parents->iterate(p s="" |
          if p <> Object and ((shown = []) or (shown->contains(p.name.toString()))) and (not(XCore.contents()->contains(p)) or includeXCore)
          then s + p.getDiagram(actions,shown,selected,includeXCore,packages) + name + " --|> " + self.possiblyGenericName(p) + "\n" 
          else s
          end)
      end
    end
  end
end;

@Aspect ToHTML

  @Class XCore::Class
  
    @Operation toHTMLDoc(fout:OutputChannel)
      self.toHTMLDoc(fout,xmf.preference("ShowLongDocumentation"))
    end
  
    @Operation toHTMLDoc(fout:OutputChannel,showOpBody:Boolean)
    
      // Write the doc file ...

      format(stdout,"Writing documentation for ~S~%",[self]);
      
      format(fout,"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">~%");
      format(fout,"<HTML>~%<HEAD>~%<TITLE>~%~S~%</TITLE>~%</HEAD>~%",Seq{name});
      format(fout,"<FONT SIZE=\"+2\"><B>~S</B></FONT><BR><BR><HR>~%",Seq{name});
      format(fout,"<FONT SIZE=\"+1\"><B>Overview</B></FONT><BR>~%");
      format(fout,"<P>~%~S~%",Seq{self.doc().doc});
      format(fout,"<BR><HR>~%");

      // Write the package ...

      if owner <> null
      then 
        format(fout,"<B>Owner</B>~%");
        format(fout,"<A HREF=\"~S\">~S</A>~%",Seq{owner.href(self.pathSeq()),owner.name.toString()});   
        format(fout,"<BR><HR>~%")
      end;
      
      // Write the parents ...
         
      format(fout,"<B>Parents</B>~%");
      @For p in self.parents do
         format(fout,"<A HREF=\"~S\">~S</A>~%",Seq{p.href(self.pathSeq()),p.name.toString()});
         if not isLast then format(fout,",") end
      end;
      
      format(fout,"<BR><HR>~%");
         
      // Write the subclasses ...
         
      format(fout,"<B>Subclasses</B>~%");
      @For p in self.allDirectSubclasses()->reject(c | c.isKindOf(Package)) do
         format(fout,"<A HREF=\"~S\">~S</A>~%",Seq{p.href(self.pathSeq()),p.name.toString()});
         if not isLast then format(fout,",") end
      end;
         
      // Write the meta-class instances ...
         
      if self.isMetaClass()
      then 
        format(fout,"<BR><HR>~%");
        format(fout,"<B>Meta Instances</B>~%");
        @For p in self.allDirectInstances() do
           format(fout,"<A HREF=\"~S\">~S</A>~%",Seq{p.href(self.pathSeq()),p.name.toString()});
           if not isLast then format(fout,",") end
        end
      end;
         
      format(fout,"<BR><HR><BR>~%");
         
      // Write the constructors ...
         
      format(fout,"<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">~%");
      format(fout,"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">~%");
      format(fout,"<TD COLSPAN=2><FONT SIZE=\"+2\">~%");
      format(fout,"<B>Constructors</B></FONT></TD>~%</TR>~%");
      @For c in constructors do
         format(fout,"<TR><TD>~S(~S)</TD><TD>~S</TD></TR>~%",Seq{name,c.names->separateWith(","),c.doc().doc})
      end;
      format(fout,"</TABLE>~%");
         
      format(fout,"<BR><HR><BR>~%");
         
      // Write the attributes ...
         
      format(fout,"<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">~%");
      format(fout,"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">~%");
      format(fout,"<TD COLSPAN=3><FONT SIZE=\"+2\">~%");
      format(fout,"<B>Attributes</B></FONT></TD>~%</TR>~%");
      @For a in attributes->asSeq->sortNamedElements do
         format(fout,"<TR><TD><B>~S</B></TD><TD><A HREF=\"~S\">~S<\A></TD><TD>~S</TD></TR>~%",Seq{a.name(),a.underlyingType().href(self.pathSeq()),a.type.name().toString(),a.doc().doc})
      end;
      format(fout,"<TR>~%<TD COLSPAN=3>~%<FONT SIZE=\"-1\">~%");
      @For p in self.allParents() do
         if not p.attributes->isEmpty
         then
           format(fout,"<B>From</B> <A HREF=\"~S\">~S</A>: ",Seq{p.href(self.pathSeq()),p.name.toString()});
           @For a in p.attributes->asSeq->sortNamedElements do
             format(fout,"~S",Seq{a.name});
             if not isLast then format(fout,", ") else format(fout,". ") end
           end;
           format(fout,"<BR>")
         end
      end;
      format(fout,"</FONT>~%</TD>~%</TR>~%");
         
      format(fout,"</TABLE>~%");
         
      format(fout,"<BR><HR><BR>~%");
         
      // Write the operations ...
      
      format(fout,"<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"2\" CELLSPACING=\"0\" SUMMARY=\"\">~%");
      format(fout,"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">~%");
      format(fout,"<TD COLSPAN=2><FONT SIZE=\"+2\">~%");
      format(fout,"<B>Operations</B></FONT></TD>~%</TR>~%");
      
      
      @For o in operations->asSeq->sortNamedElements do
        if showOpBody
        then format(fout,"<TR><TD><B><a href=\"#~S\">~S</a>(",Seq{o.name(),o.name()})
        else format(fout,"<TR><TD><B>~S(",Seq{o.name()})
        end;
        @For p,t in o.paramNames(),o.paramTypes() do
          @TypeCase(t)
            Set do
              format(fout,"~S:<A HREF=\"~S\">~S<\A>",Seq{p,t.elementType.href(self.pathSeq()),t.name()})
            end
            Seq do
              format(fout,"~S:<A HREF=\"~S\">~S<\A>",Seq{p,t.elementType.href(self.pathSeq()),t.name()})
            end
            else 
              format(fout,"~S:<A HREF=\"~S\">~S<\A>",Seq{p,t.href(self.pathSeq()),t.name()})
            end;
            if not isLast then format(fout,",") end
        end;
        format(fout,"):");
        @TypeCase(o.type())
          Set do
            format(fout,"<A HREF=\"~S\">~S<\A>",Seq{o.type().elementType.href(self.pathSeq()),o.type().name()})
          end
          Seq do
            format(fout,"<A HREF=\"~S\">~S<\A>",Seq{o.type().elementType.href(self.pathSeq()),o.type().name()})
          end
          else 
           format(fout,"<A HREF=\"~S\">~S<\A>",Seq{o.type().href(self.pathSeq()),o.type().name()})
        end;
        format(fout,"</B></TD><TD>~S</TD></TR>~%",Seq{o.doc().doc})
      end;
      format(fout,"<TR>~%<TD COLSPAN=2>~%<FONT SIZE=\"-1\">~%");
      @For p in self.allParents() do
        if not p.operations->isEmpty
        then
          format(fout,"<B>From</B> <A HREF=\"~S\">~S</A>: ",Seq{p.href(self.pathSeq()),p.name.toString()});
          @For o in p.operations->asSeq->sortNamedElements do
            format(fout,"~S",Seq{o.name});
            if not isLast then format(fout,", ") else format(fout,". ") end
          end;
          format(fout,"<BR>")
        end
      end;
      
      if showOpBody then
        @For o in operations->asSeq->sortNamedElements do
          format(fout,"<TR><TD COLSPAN=2>");
          if o.isKindOf(Operation)
          then 
            format(fout,"<a name=\"~S\"/>",[o.name()]);
            format(fout,"<FONT FACE=\"Courier\" SIZE=\"1\">~S</FONT>~%",Seq{o.source().asHTML()})
          end;
          format(fout,"</TD></TR>~%")
        end
      end;
      
      format(fout,"</FONT>~%</TD>~%</TR>~%");
      format(fout,"</TABLE>~%"); 
         
      if grammar <> null
      then
        format(fout,"<BR><HR><BR>~%");
         
        // Write the grammar ...
         
        format(fout,"<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">~%");
        format(fout,"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">~%");
        format(fout,"<TD COLSPAN=1><FONT SIZE=\"+2\">~%");
        format(fout,"<B>Grammar</B></FONT></TD>~%</TR>~%");
        format(fout,"<TD><PRE>~%");
        if grammar.source <> ""
        then format(fout,"~S~%",[grammar.source])
        else grammar.pprint(fout,0)
        end;
        format(fout,"</PRE></TD>~%");
        format(fout,"</TABLE>~%")  
      end;
         
      format(fout,"</HTML>~%")
   
    end
  end
  
  @Class XCore::DataType
  
     @Operation toHTML(root:String)
    
      // Ensure the directory for this datatype exists:
      
      if (root + "/" + name.toString()).mkDir()
      then
        let fout = FileOutputChannel(root + "/" + name.toString() + "/index.html")
        in
          self.toHTMLDoc(fout);
          fout.close()
        end
      end
      
    end
  
    @Operation toHTMLDoc(fout:OutputChannel)
    
      // Write the doc file ...
      
      format(stdout,"Writing documentation for ~S~%",[self]);
      
      format(fout,"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">~%");
      format(fout,"<HTML>~%<HEAD>~%<TITLE>~%~S~%</TITLE>~%</HEAD>~%",Seq{name});
      format(fout,"<FONT SIZE=\"+2\"><B>~S</B></FONT><BR><BR><HR>~%",Seq{name});
      format(fout,"<FONT SIZE=\"+1\"><B>Overview</B></FONT><BR>~%");
      format(fout,"<P>~%~S~%",Seq{self.doc().doc});
      format(fout,"<BR><HR><BR>~%");
         
      // Write the operations ...
         
      format(fout,"<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">~%");
      format(fout,"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">~%");
      format(fout,"<TD COLSPAN=2><FONT SIZE=\"+2\">~%");
      format(fout,"<B>Operations</B></FONT></TD>~%</TR>~%");
      /* @For o in operations->asSeq->sortNamedElements do
        format(fout,"<TR><TD><B>~S(~{,~;~S~})</B></TD><TD>~S</TD></TR>~%",Seq{o.name(),o.paramNames(),o.doc().doc})
      end; */
      
      @For o in operations->asSeq->sortNamedElements do
         format(fout,"<TR><TD><B>~S(",Seq{o.name()});
         @For p,t in o.paramNames(),o.paramTypes() do
           @TypeCase(t)
             Set do
               format(fout,"~S:<A HREF=\"~S\">~S<\A>",Seq{p,t.elementType.href(self.pathSeq()),t.name()})
             end
             Seq do
               format(fout,"~S:<A HREF=\"~S\">~S<\A>",Seq{p,t.elementType.href(self.pathSeq()),t.name()})
             end
             else format(fout,"~S:<A HREF=\"~S\">~S<\A>",Seq{p,t.href(self.pathSeq()),t.name()})
           end;
           if not isLast then format(fout,",") end
         end;
         format(fout,"):");
         @TypeCase(o.type())
           Set do
             format(fout,"<A HREF=\"~S\">~S<\A>",Seq{o.type().elementType.href(self.pathSeq()),o.type().name()})
           end
           Seq do
             format(fout,"<A HREF=\"~S\">~S<\A>",Seq{o.type().elementType.href(self.pathSeq()),o.type().name()})
           end
           else format(fout,"<A HREF=\"~S\">~S<\A>",Seq{o.type().href(self.pathSeq()),o.type().name()})
         end;
         format(fout,"</B></TD><TD>~S</TD></TR>~%",Seq{o.doc().doc})
      end;
      
      format(fout,"</TABLE>~%");
      format(fout,"</HTML>~%")
    end
    
  end
      

  @Class Element
  
    @Operation allHTMLEntries():Seq(NamedElement)
    
      // Return all the entries that will occur in the
      // index file.
      Seq{}
    end
    
    @Operation allHTMLPackages():Seq(Package)
    
      // Return all the entries that will occur in the
      // packages index file.
      Seq{}
    end
  
    @Operation toHTML(root:String)
    
      // By default do nothing...
      
      self
    end
  
    @Operation writeHTML()
    
      // Write HTML documentation to the system specified
      // documentation directory.
      
      self.writeHTML(xmf.docDir())
    end
  
    @Operation writeHTML(root:String)
      
      // If documentation is generated on a class lower down the 
      // package hierarchy than Root then URLs fail because URLs 
      // are relative to Root.  The following code ensures all HTML 
      // is relative to Root.
      
      let 
        path = self.pathSeq().butLast();
        psuedoRoot = root;
        dirsCreatedOkay = true 
      in
        dirsCreatedOkay := root.mkDir(); 
        @For p in path do
          psuedoRoot := psuedoRoot + "/" + p;
          dirsCreatedOkay := psuedoRoot.mkDir()
        end;
      
        if dirsCreatedOkay
        then
          
          // Write the directory structure and entries...
        
          self.toHTML(psuedoRoot)
        else
          self.error("Cannot create HTML root directory: " + root)
        end
      end;
      
      // Write the index file ...
      
      self.writeHTMLIndex(root);
      
      // Write all the entries to a frame ...
      
      self.writeHTMLAllEntries(root);
      
      // Write all the packages to a frame ...
      
      self.writeHTMLAllPackages(root);
      
      // Write the overview file ...
      
      self.writeHTMLOverview(root)
      
    end
    
    @Operation writeHTMLAllEntries(root:String)
      
      let fout = FileOutputChannel(root + "/" + "AllEntries.html");
          allEntries = self.allHTMLEntries()->sortNamedElements
      in format(fout,"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">");
         format(fout,"<HTML>~%<HEAD>~%<TITLE>~%All Entries ~S~%</TITLE>~%",Seq{xmf.version()});
         format(fout,"<LINK REL =\"stylesheet\" TYPE=\"text/css\" HREF=\"../stylesheet.css\" TITLE=\"Style\">~%");
         format(fout,"</HEAD>~%<BODY BGCOLOR=\"white\">~%<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">~%<B>All Entries</B></FONT>~%<BR>~%");
         format(fout,"<TABLE BORDER=\"0\" WIDTH=\"100%\" SUMMARY=\"\">~%<TR>~%<TD NOWRAP>~%");
         @For entry in allEntries do
           let href = entry.pathSeq()->separateWith("/") + "/index.html";
               path = entry.owner.path()
           in format(fout,"<A HREF=\"~S\" target=\"DocFrame\">~S</A> (in ~S)~%",Seq{href,entry.name,path});
              format(fout,"<BR>")
           end
         end;
         format(fout,"</FONT>~%</TD>~%</TR>~%</TABLE>~%</BODY>~%");
         format(fout,"</HTML>~%");
         fout.close()
      end
      
    end
    
    @Operation writeHTMLAllPackages(root:String)
      
      let fout = FileOutputChannel(root + "/" + "AllPackages.html");
          allPackages = self.allHTMLPackages()
      in format(fout,"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">");
         format(fout,"<HTML>~%<HEAD>~%<TITLE>~%All Entries ~S~%</TITLE>~%",Seq{xmf.version()});
         format(fout,"<LINK REL =\"stylesheet\" TYPE=\"text/css\" HREF=\"../stylesheet.css\" TITLE=\"Style\">~%");
         format(fout,"</HEAD>~%<BODY BGCOLOR=\"white\">~%<FONT size=\"+1\" CLASS=\"FrameHeadingFont\">~%<B>All Name Spaces</B></FONT>~%<BR>~%");
         format(fout,"<TABLE BORDER=\"0\" WIDTH=\"100%\" SUMMARY=\"\">~%<TR>~%<TD NOWRAP>~%");
         @For entry in allPackages do
           let href = entry.pathSeq()->separateWith("/") + "/index.html";
               path = entry.owner.path()
           in format(fout,"<A HREF=\"~S\" target=\"DocFrame\">~S</A> (in ~S)~%",Seq{href,entry.name,path});
              format(fout,"<BR>")
           end
         end;
         format(fout,"</FONT>~%</TD>~%</TR>~%</TABLE>~%</BODY>~%");
         format(fout,"</HTML>~%");
         fout.close()
      end
      
    end
    
    @Operation writeHTMLIndex(root:String)
    
      // Write the file that is the starting point for the documentation...
      
      let fout = FileOutputChannel(root + "/index.html")
      in format(fout,"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">~%");
         format(fout,"<HTML>~%<HEAD>~%<TITLE>~%XMF ~S~%</TITLE>~%</HEAD>~%",Seq{xmf.version()});
         format(fout,"<FRAMESET cols=\"20%,80%\">~%<FRAMESET rows=\"30%,70%\">~%");
         format(fout,"<FRAME src=\"AllPackages.html\" name=\"AllPackagesFrame\" title=\"All Packages\">~%");
         format(fout,"<FRAME src=\"AllEntries.html\" name=\"AllEntriesFrame\" title=\All Entries\">~%");
         format(fout,"</FRAMESET>~%");
         format(fout,"<FRAME src=\"Overview.html\" name=\"DocFrame\" scrolling=\"yes\">~%");
         format(fout,"</FRAMESET>~%");
         format(fout,"</HTML>~%");
         fout.close()
      end
      
    end
    
    @Operation writeHTMLOverview(root:String)
    
      let fout = FileOutputChannel(root + "/Overview.html");
          title = "Documentation"
                  + if self.isKindOf(NamedElement) then " for " + self.path() else "" end
      in format(fout,"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">~%");
         format(fout,"<HTML>~%<HEAD>~%<TITLE>~%XMF ~S~%</TITLE>~%</HEAD>~%",Seq{xmf.version()});
         format(fout,"<br><br><br>");
         format(fout,"<center><h1>~S</h1></center>",Seq{title});
         format(fout,"<center>Click on a link on the left to view details.</center>");
         format(fout,"</HTML>~%");
         fout.close()
      end
      
    end
             
  end
  
  @Class XCore::NamedElement
  
    @Operation href(currentPath):String
    
      @Doc
        Returns the path used in an href to the receiver. It assumes
        that we are relative to a root that contains the root name space.
      end
      
      currentPath->collect( x | "..")->separateWith("/") + "/" +
        self.pathSeq()->separateWith("/") + 
        "/index.html"
      
    end
    
  end
  
  @Class XCore::NameSpace
  
    @Operation allHTMLEntries():Seq(NamedElement)
      Seq{self | self.contentsOf(NamedElement)
                   ->excluding(self)
                   ->asSeq
                   ->collect(x | x.allHTMLEntries())
                   ->flatten}
    end
    
    @Operation allHTMLPackages():Seq(NamedElement)
      Seq{self | self.contentsOf(Package)
                   ->excluding(self)
                   ->asSeq
                   ->collect(x | x.allHTMLPackages())
                   ->flatten}->sortNamedElements
    end
  
    @Operation toHTML(root:String)
    
      // Ensure the directory for this nameSpace exists:
      
      if (root + "/" + name.toString()).mkDir()
      then
      
        // Handle each contained element:
        
        @For element in self.contents()->excluding(self) do
          element.toHTML(root + "/" + name.toString())
        end;
        let fout = FileOutputChannel(root + "/" + name.toString() + "/index.html")
        in self.toHTMLDoc(fout);
           fout.close()
        end
      end
      
    end

    @Operation toHTMLDoc(fout:OutputChannel)
    
      // Write the doc file ...
      
      format(fout,"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">~%");
      format(fout,"<HTML>~%<HEAD>~%<TITLE>~%~S~%</TITLE>~%</HEAD>~%",Seq{name});
      format(fout,"<FONT SIZE=\"+2\"><B>~S</B></FONT><BR><BR><HR>~%",Seq{name});
      format(fout,"<FONT SIZE=\"+1\"><B>Overview</B></FONT><BR>~%");
      format(fout,"<P>~%~S~%",Seq{self.doc().doc});
      format(fout,"<BR><HR><BR>~%");
      
      // Write a diagram...

      format(fout,"~S~%",[xmf.javaClass("web.SVG").plantUML2SVG(self.getDiagram())]);
      format(fout,"<BR><HR>~%");

      // Write the contents ...
         
      format(fout,"<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">~%");
      format(fout,"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">~%");
      format(fout,"<TD COLSPAN=2><FONT SIZE=\"+2\">~%");
      format(fout,"<B>Contents</B></FONT></TD>~%</TR>~%");
      
      @For c in self.contents()->excluding(null)->asSeq->sortNamedElements when c.isKindOf(NamedElement) do
        let docString = 
          if c.hasSlot("documentation") and not c.isKindOf(ForeignOperation)
          then
            c.doc().doc
          else
            "No Documentation Specified"
          end
        in
          if(c.isKindOf(Class))
          then format(fout,"<TR><TD><B><A HREF=\"~S\">~S</A></B></TD><TD>~S</TD></TR>~%",Seq{c.href(self.pathSeq()),c.name(),docString})
          else format(fout,"<TR><TD><B>~S</B></TD><TD>~S</TD></TR>~%",Seq{c.name(),docString})
          end
        end
      end;
      
      format(fout,"</TABLE>~%");
      format(fout,"</HTML>~%")
    end    
     
  end
  
   @Class XCore::Package
  
    @Operation toHTMLDoc(fout:OutputChannel)
    
      // Write the doc file ...
      
      format(stdout,"Writing documentation for ~S~%",[self]);
      
      format(fout,"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">~%");
      format(fout,"<HTML>~%<HEAD>~%<TITLE>~%~S~%</TITLE>~%</HEAD>~%",Seq{name});
      format(fout,"<FONT SIZE=\"+2\"><B>~S</B></FONT><BR><BR><HR>~%",Seq{name});
      format(fout,"<FONT SIZE=\"+1\"><B>Overview</B></FONT><BR>~%");
      format(fout,"<P>~%~S~%",Seq{self.doc().doc});
      format(fout,"<BR><HR><BR>~%");
      
      // Write a diagram...

      format(fout,"~S~%",[xmf.javaClass("web.SVG").plantUML2SVG(self.getDiagram())]);
      format(fout,"<BR><HR>~%");

      // Write the package ...

      if owner <> null
      then 
        format(fout,"<B>Owner</B>~%");
        format(fout,"<A HREF=\"~S\">~S</A>~%",Seq{owner.href(self.pathSeq()),owner.name.toString()});   
        format(fout,"<BR><HR>~%")
      end;
   
      // Write the packages ...
         
      format(fout,"<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">~%");
      format(fout,"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">~%");
      format(fout,"<TD COLSPAN=2><FONT SIZE=\"+2\">~%");
      format(fout,"<B>Packages</B></FONT></TD>~%</TR>~%");
      @For p in packages->asSeq->sortNamedElements do
         // format(fout,"<TR><TD><B><A HREF=\"~S\" TARGET=\"DocFrame\">~S</A></B></TD><TD>~S</TD></TR>~%",Seq{p.href(self.pathSeq()),p.name(),p.doc().doc})
         format(fout,"<TR><TD><B><A HREF=\"~S\">~S</A></B></TD><TD>~S</TD></TR>~%",Seq{p.href(self.pathSeq()),p.name(),p.doc().doc})
      end;
      format(fout,"</TABLE>~%");
      format(fout,"<BR><HR><BR>~%");
         
      // Write the classes ...
         
      format(fout,"<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">~%");
      format(fout,"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">~%");
      format(fout,"<TD COLSPAN=2><FONT SIZE=\"+2\">~%");
      format(fout,"<B>Classes</B></FONT></TD>~%</TR>~%");
      @For c in classes->asSeq->sortNamedElements do
         // format(fout,"<TR><TD><B><A HREF=\"~S\" TARGET=\"DocFrame\">~S</A></B></TD><TD>~S</TD></TR>~%",Seq{c.href(self.pathSeq()),c.name(),c.doc().doc})
         format(fout,"<TR><TD><B><A HREF=\"~S\">~S</A></B></TD><TD>~S</TD></TR>~%",Seq{c.href(self.pathSeq()),c.name(),c.doc().doc})
      end;
      format(fout,"</TABLE>~%");
      format(fout,"<BR><HR><BR>~%");
         
      // Write the data types ...
         
      if self.contents()->exists(d | d <> null and d.isKindOf(DataType))
      then
         
        format(fout,"<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">~%");
        format(fout,"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">~%");
        format(fout,"<TD COLSPAN=2><FONT SIZE=\"+2\">~%");
        format(fout,"<B>DataTypes</B></FONT></TD>~%</TR>~%");
        @For d in self.contents()->select(d | d <> null and d.isKindOf(DataType))->asSeq->sortNamedElements do
           // format(fout,"<TR><TD><B><A HREF=\"~S\" TARGET=\"DocFrame\">~S</A></B></TD><TD>~S</TD></TR>~%",Seq{d.href(self.pathSeq()),d.name(),d.doc().doc})
           format(fout,"<TR><TD><B><A HREF=\"~S\">~S</A></B></TD><TD>~S</TD></TR>~%",Seq{d.href(self.pathSeq()),d.name(),d.doc().doc})
        end;
        format(fout,"</TABLE>~%");
        format(fout,"<BR><HR><BR>~%")
         
      end;
         
      // Write the operations ...
         
      format(fout,"<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">~%");
      format(fout,"<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">~%");
      format(fout,"<TD COLSPAN=2><FONT SIZE=\"+2\">~%");
      format(fout,"<B>Operations</B></FONT></TD>~%</TR>~%");
      @For o in operations->asSeq->sortNamedElements do
         format(fout,"<TR><TD><B>~S(~{,~;~S~})</B></TD><TD>~S</TD></TR>~%",Seq{o.name(),o.paramNames(),o.doc().doc})
      end;
      format(fout,"</TABLE>~%");
      format(fout,"</HTML>~%")
         
    end
    
  end
  
  
end;
